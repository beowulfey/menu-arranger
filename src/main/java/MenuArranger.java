//package sc.fiji.menuarranger;

import net.imagej.ImageJ;
import org.scijava.command.Command;
import org.scijava.command.InteractiveCommand;
import org.scijava.log.LogService;
import org.scijava.menu.MenuService;
import org.scijava.menu.ShadowMenu;
import org.scijava.plugin.Parameter;
import org.scijava.plugin.Plugin;
import org.scijava.ui.UIService;
import org.scijava.ui.swing.menu.SwingJMenuBarCreator;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;

@Plugin(type = Command.class, menuPath = "File>Arrange Menus")
public class MenuArranger extends InteractiveCommand {
    // Autogenerated by GUI creator
    private JPanel rootPanel;
    private JTree menuTree;
    private JButton cancelButton;
    private JButton okButton;
    private JButton menuRefresh;
    private JButton hideButton;
    private JButton showButton;
    private JPanel BottomPanel;
    private JPanel menuPanel;
    private JPanel adjustPanel;
    private JSplitPane adjustSplitPane;
    private JScrollPane hiddenPane;
    private JScrollPane visiblePane;
    private JScrollPane menuScrollPane;


    @Parameter
    private MenuService menuService;
    @Parameter
    private UIService uiService;

    @Parameter
    private LogService logService;

    private JFrame frame = null;
    private DefaultMutableTreeNode treeRoot = new DefaultMutableTreeNode("Menu");
    private DefaultTreeModel treeModel = new DefaultTreeModel(treeRoot);
    final JMenuBar swingMenuBar = new JMenuBar(); // Maybe not final?

    {
        System.out.println("OUTSIDE IT ALL, TOP OF THE CLASS!");
        System.out.println(treeModel.getChildCount(treeRoot));
        System.out.println(treeModel.getRoot());
    }

    ////// TO DO!
    // FIGURE OUT HOW TO ADD THE ROOTS. THE ROOT IS NOT BEING SAVED.
    // DEFINITELY A PROBLEM WITH VARIABLES OUTSIDE OF SCOPE.


    ///////////////////////////////////////////////////////////////////////////////////
    // Reads through the shadow menu currently in use as the context.
    // Creates nodes for each parent. Right now it only goes through the first layer.
    // Applies those nodes to the Root.
    // WORKS WELL! YES!
    private void parseMenu(final ShadowMenu root, DefaultMutableTreeNode treeParent) {
        double prevDepth = 0;
        DefaultMutableTreeNode node = null;
        for (ShadowMenu child : root.getChildren()) {
            final double depth = child.getMenuDepth();
            //logService.info("Found new node!");
            //logService.info(child.getMenuEntry());
            //logService.info(depth);
            if (depth == prevDepth) {  // Change this here to go beyond the first layer.
                node = new DefaultMutableTreeNode(child.getMenuEntry());
                treeParent.add(node);
                logService.info(node);
            }
            if (child.getChildren() != null) {
                parseMenu(child, node);
            }
        }
    }

    @Override
    public void run() {
        if (frame == null) {
            frame = new JFrame("Menu Arranger");
            System.out.println("THIS IS INSIDE THE RUN!");
            final ShadowMenu orig = menuService.getMenu();

            // access menu from context and build the nodes that attach to root (and below).
            parseMenu(orig, treeRoot);
            treeModel.setRoot(treeRoot);
            System.out.println(treeModel.getChildCount(treeRoot));

            //THIS SECTION WILL ALLOW ME TO ADJUST THE MENU!! Right now I'm just reusing the default menu.
            new SwingJMenuBarCreator().createMenus(orig, swingMenuBar);
            frame.setJMenuBar(swingMenuBar);

            //THIS is supposed to update the tree. ain't working.
            //treeModel = (DefaultTreeModel) menuTree.getModel();
            //treeModel.reload(treeRoot);
            //treeModel.setRoot(treeRoot);

            System.out.println(menuTree.getModel().getRoot());


            // UI SETUP AND APPEARANCE.
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setContentPane(new MenuArranger().rootPanel);
            frame.pack();
            frame.setVisible(true);
        } else {
            System.out.println(frame);
            logService.info("Frame was already made!");
        }


    }

    public static void main(final String... args) {

        // Launch ImageJ as usual.
        ImageJ ij = new ImageJ();
        ij.launch(args);

        System.out.println("THIS IS BEFORE IT RUNS");

        // why does this have to be false? if I make it true, the command runs twice?!
        ij.command().run(MenuArranger.class, false);


    }


    private void createUIComponents() {
        System.out.println("THIS IS IN THE UI!");
        System.out.println(treeModel.getChildCount(treeRoot));
        menuTree = new JTree(treeModel);
        menuTree.isExpanded(3);
        menuTree.setEditable(true);
        menuTree.setShowsRootHandles(true);
        //System.out.println(menuTree.getModel().getRoot());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.setAutoscrolls(false);
        rootPanel.setPreferredSize(new Dimension(600, 350));
        rootPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null));
        BottomPanel = new JPanel();
        BottomPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(BottomPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 2, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        BottomPanel.add(cancelButton, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 0, false));
        okButton = new JButton();
        okButton.setText("OK");
        BottomPanel.add(okButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        BottomPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 1, false));
        final JSeparator separator1 = new JSeparator();
        BottomPanel.add(separator1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        menuPanel = new JPanel();
        menuPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(menuPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 1, false));
        menuPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Current Menu", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.ABOVE_TOP));
        menuRefresh = new JButton();
        menuRefresh.setHorizontalTextPosition(0);
        menuRefresh.setText("Refresh");
        menuPanel.add(menuRefresh, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        menuScrollPane = new JScrollPane();
        menuPanel.add(menuScrollPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, -1), null, 0, false));
        menuTree.setEditable(true);
        menuTree.setShowsRootHandles(false);
        menuScrollPane.setViewportView(menuTree);
        adjustPanel = new JPanel();
        adjustPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(adjustPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        adjustSplitPane = new JSplitPane();
        adjustSplitPane.setDividerLocation(200);
        adjustPanel.add(adjustSplitPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(200, 200), null, 0, false));
        visiblePane = new JScrollPane();
        adjustSplitPane.setLeftComponent(visiblePane);
        visiblePane.setBorder(BorderFactory.createTitledBorder(null, "Visible", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.ABOVE_TOP));
        hiddenPane = new JScrollPane();
        adjustSplitPane.setRightComponent(hiddenPane);
        hiddenPane.setBorder(BorderFactory.createTitledBorder(null, "Hidden", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.ABOVE_TOP));
        hideButton = new JButton();
        hideButton.setText("Hide Option");
        adjustPanel.add(hideButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        showButton = new JButton();
        showButton.setText("Show Option");
        adjustPanel.add(showButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        rootPanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 10), null, 2, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        rootPanel.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(0, -1), null, 1, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}